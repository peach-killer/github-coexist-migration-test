pipeline {
    agent any
    options {
        timeout(time: 1, unit: 'HOURS')
        retry(3)
    }
    triggers {
        cron('H 4/* 0 0 1-5')
    }
    parameters {
        string(name: 'BRANCH', defaultValue: 'main', description: 'Git branch to build')
        booleanParam(name: 'DEPLOY', defaultValue: true, description: 'Deploy after build')
        choice(name: 'Choice', choices: ['dev', 'staging', 'production'], description: 'Deployment environment')
        fileParam(name: 'CONFIG_FILE', description: 'Configuration file')
    }
    environment {
        APP_ENV = "production"
        DEPLOY_SERVER = "deploy.example.com"
        VAR1 = "value1"
        VAR2 = "value2"
        API_KEY = "12345-ABCDE"
    }
    tools {
        jdk 'JDK11'
        maven 'Maven3'
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: "${params.BRANCH}", url: 'https://github.com/example/repo.git'
            }
        }
        stage('Build') {
            steps {
                sh 'mvn clean install'
            }
        }
        stage('Test') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }
        stage('Deploy') {
            when {
                expression { return params.DEPLOY }
            }
            steps {
                sshPublisher(publishers: [sshPublisherDesc(
                    configName: 'DeployConfig',
                    transfers: [sshTransfer(
                        sourceFiles: '**/target/*.jar',
                        removePrefix: 'target',
                        remoteDirectory: '/var/www/app'
                    )],
                    usePromotionTimestamp: false
                )])
                sh "ssh user@${DEPLOY_SERVER} 'sudo systemctl restart app'"
            }
        }
    }
    post {
        success {
            slackSend channel: '#deployments', message: "Build and Deployment succeeded for ${env.BRANCH}"
        }
        failure {
            slackSend channel: '#deployments', message: "Build or Deployment failed for ${env.BRANCH}"
        }
    }
}
